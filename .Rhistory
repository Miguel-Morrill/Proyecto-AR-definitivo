cov(na.omit(datos_corr))
library(tidyverse)
setwd('C:/Users/theso/OneDrive/Documents/Semestre 6/Analisis de Riesgo/Proyecto-AR-definitivo/Datos')
Emisoras <- read_csv('Emisoras_Completo2.csv')
Emisoras <- as.matrix(Emisoras)
datos2 <- new.env()
n <- nrow(Emisoras)
MAT_COR <- as.data.frame(matrix(0,n,2))
names(MAT_COR) <- c("Emisoras","Correlación")
for (i in 1:n) {
clave2 <- Emisoras[i,1]
getSymbols(clave2, from='2016-01-01', to=today(), warnings = FALSE, env=datos2)
activo2 <- datos2[[clave2]]
precio2 <- activo2[,6]
rend_act2 <- na.omit(diff(log(precio2)))
datos_cor2 <- merge.xts(rendimiento, rend_act2)
#chart.Correlation(na.omit(datos_cor2)) #para que no me haga 100 graficas
m <- cor(na.omit(datos_cor2))
ro <- m[2,1]
MAT_COR[i,1] <- clave2
MAT_COR[i,2] <- ro
}
library(tidyverse)
library(kableExtra)
mas_co <- arrange(MAT_COR,-Correlación)[2:6,]
DF_Emi <- tibble(mas_co)
kable(DF_Emi, caption = "<center>**Activos más Correlacionados**", align = c("c","c"), digits = 6) %>%
kable_classic(full_width=F) %>%
row_spec(0, bold = T) %>% #selecciono la columna 1 en negritas
column_spec(1, bold = T, color = "blue")
getSymbols("LACOMERUBC.MX", from='2016-01-01', to=today(), warnings=FALSE)
rend_LACOMERUBC <- na.omit(diff(log(LACOMERUBC.MX$LACOMERUBC.MX.Adjusted)))
getSymbols("RA.MX", from='2016-01-01', to=today(), warnings=FALSE)
rend_RA <- na.omit(diff(log(RA.MX$RA.MX.Adjusted)))
getSymbols("GFINBURO.MX", from='2016-01-01', to=today(), warnings=FALSE)
rend_GFINBURO <- na.omit(diff(log(GFINBURO.MX$GFINBURO.MX.Adjusted)))
getSymbols("GFNORTEO.MX", from='2016-01-01', to=today(), warnings=FALSE)
rend_GFNORTEO <- na.omit(diff(log(GFNORTEO.MX$GFNORTEO.MX.Adjusted)))
clave7 <- "AMX"
datos7 <- new.env()
getSymbols(clave7, from = "2016-01-01", to = today(), warnings = FALSE, env = datos7)
precio7 <- datos7[[clave7]][,6] #la información en la columna 6, o sea los precios al cierre
names(precio7) <- clave7
rend_AMX <-na.omit(diff(log(precio7)))
chartSeries((rendimiento), name = paste("Rendimiento de SITESB-1.MX"),up.col = "yellow", dn.col = "red")
chartSeries((rend_LACOMERUBC), name = paste("Precio de LACOMERUBC"),up.col = "orange", dn.col = "red")
chartSeries((rend_RA), name = paste("Rendimiento de RA"),up.col = "red", dn.col = "red")
chartSeries((rend_GFINBURO), name = paste("Rendimiento de GFINBURO"),up.col = "blue", dn.col = "red")
chartSeries((rend_GFNORTEO), name = paste("Rendimiento de GFNORTEO"),up.col = "purple", dn.col = "red")
chartSeries((rend_AMX), name = paste("Rendimiento de AMX"),up.col = "pink", dn.col = "red")
chartSeries((rend_mercado), name = paste("Rendimiento de IPC"),up.col = "white", dn.col = "red")
rend_T <- merge.xts(rendimiento, rend_LACOMERUBC, rend_RA, rend_GFINBURO, rend_GFNORTEO,  rend_AMX, rend_mercado)
plot(rend_T, main = "Rendimientos de los Activos + IPC")
legend(legend.loc("bottom"), legend = c("SITESB-1.MX", "LACOMERUBC.MX", "RA.MX", "GFINBURO.MX",  "GFNORTEO.MX", "AMX", "MXX"), merge=TRUE)
rend_T <- merge.xts(rendimiento, rend_LACOMERUBC, rend_RA, rend_GFINBURO, rend_GFNORTEO,  rend_AMX, rend_mercado)
plot(rend_T, main = "Rendimientos de los Activos + IPC")
legend( legend = c("SITESB-1.MX", "LACOMERUBC.MX", "RA.MX", "GFINBURO.MX",  "GFNORTEO.MX", "AMX", "MXX"), merge=TRUE)
rend_T <- merge.xts(rendimiento, rend_LACOMERUBC, rend_RA, rend_GFINBURO, rend_GFNORTEO,  rend_AMX, rend_mercado)
plot(rend_T, main = "Rendimientos de los Activos + IPC", legend.loc="bottom")
rend_T <- merge.xts(rendimiento, rend_LACOMERUBC, rend_RA, rend_GFINBURO, rend_GFNORTEO,  rend_AMX, rend_mercado)
plot(rend_T, main = "Rendimientos de los Activos + IPC", legend.loc="botto")
rend_T <- merge.xts(rendimiento, rend_LACOMERUBC, rend_RA, rend_GFINBURO, rend_GFNORTEO,  rend_AMX, rend_mercado)
plot(rend_T, main = "Rendimientos de los Activos + IPC", legend.loc="upper left")
rend_T <- merge.xts(rendimiento, rend_LACOMERUBC, rend_RA, rend_GFINBURO, rend_GFNORTEO,  rend_AMX, rend_mercado)
plot(rend_T, main = "Rendimientos de los Activos + IPC", legend.loc="up")
rend_T <- merge.xts(rendimiento, rend_LACOMERUBC, rend_RA, rend_GFINBURO, rend_GFNORTEO,  rend_AMX, rend_mercado)
plot(rend_T, main = "Rendimientos de los Activos + IPC", legend.loc="righ")
rend_T <- merge.xts(rendimiento, rend_LACOMERUBC, rend_RA, rend_GFINBURO, rend_GFNORTEO,  rend_AMX, rend_mercado)
plot(rend_T, main = "Rendimientos de los Activos + IPC", legend.loc="bottom")
tickers <- c("SITESB-1.MX", "LACOMERUBC.MX", "RA.MX", "GFINBURO.MX",  "GFNORTEO.MX", "AMX", "MXX")
getSymbols(tickers, from = "2016-01-02", to = today(), warnings = FALSE)
list <- lapply((tickers), function(x) Cl(get(x)))
precio.cierre <- do.call(merge,list)
retornos <- data.frame(apply(precio.cierre, 2, function(x) Delt(x, type = "log")), fecha = index(precio.cierre))
reshape <- melt(retornos, id.vars = "fecha")
library(quantmod)
library(PerformanceAnalytics)
library(lubridate)
library(reshape2)
library(ggplot2)
library(quantmod)
library(PerformanceAnalytics)
library(lubridate)
library(reshape2)
library(ggplot2)
tickers <- c("SITESB-1.MX", "LACOMERUBC.MX", "RA.MX", "GFINBURO.MX",  "GFNORTEO.MX", "AMX", "MXX")
getSymbols(tickers, from = "2016-01-02", to = today(), warnings = FALSE)
list <- lapply((tickers), function(x) Cl(get(x)))
precio.cierre <- do.call(merge,list)
retornos <- data.frame(apply(precio.cierre, 2, function(x) Delt(x, type = "log")), fecha = index(precio.cierre))
reshape <- melt(retornos, id.vars = "fecha")
g2 <- ggplot(reshape) + geom_line(mapping = aes(fecha,value, color = variable))
g2 <- g2 + labs(title = "Retornos", subtitle = "SITES, WALMART")
g2 <- g2 + theme_bw() + xlab("Fecha") + ylab("Retornos")
g2 <- g2 + scale_color_manual("Tickers", values = c("green", "yellow", "orange", "red", "blue", "purple", "pink"))
g2 <- g2 + theme(legend.position = "bottom")
g2
Var_Real<-rendimiento**2
Vol_Real<-sqrt(Var_Real)
Real<-merge.xts(rendimiento, Vol_Real, -Vol_Real)
names(Real)<-c("Rendimiento","Vol_pos","Vol_Neg")
plot(Real, legend.loc = "top",main="Valores Observados", lwd=.5)
n <- nrow(Var_Real)
mavback <- function(x,n){filter(x, c(0, rep(1/n,n)), sides=1) }
Var_Est5<-xts(mavback(Var_Real, n=5), order.by = date(Var_Real))
library(quantmod)
library(PerformanceAnalytics)
library(lubridate)
clave <- "SITESB-1.MX"
datos <- new.env()
getSymbols(clave, from = "2015-01-02", to = today(), warnings = FALSE, env = datos)
precio <- datos[[clave]][,6] #la información en la columna 6, o sea los precios al cierre
names(precio) <- clave
chartSeries(precio, name = paste("Precio", clave),up.col = "green", dn.col = "red")
rendimiento <- na.omit(diff(log(precio)))
chartSeries(rendimiento, name = paste("Precio", clave), up.col = "green", dn.col = "red")
library(quantmod)
library(PerformanceAnalytics)
library(fBasics)
library(akima)
library(normtest)
library(crop)
library(lubridate)
library(ggplot2)
library(tibble)
clave <- 'SITESB-1.MX'
datos <- new.env()
getSymbols(clave,from="2016-01-02",to=today(),warning=FALSE,env=datos)
precio<-datos[[clave]][,6]
names(precio) <- clave
rendimiento<-na.omit(diff(log(precio)))
#chartSeries(to.monthly(rendimiento),name=paste("Precio",clave),theme="white",up.col="black",dn.col="red")
chartSeries((rendimiento),name=paste("Precio",clave),theme="white",up.col="black",dn.col="red")
chartSeries(precio, name = paste("Precio", clave),up.col = "green", dn.col = "red")
ggplot(rendimiento, aes(rendimiento)) +
geom_histogram(aes(y = ..density..), fill='white', color = 'brown') + #queremos obtener los valores ponderados de la frecuencia
geom_density(fill = 'green', alpha=.15)+ #alpha me meustro el 15% del color
geom_vline(aes(xintercept=mean(rendimiento)), color='blue', linetype='dashed', size=1)
chartSeries(to.monthly(precio), theme='white', up.col='green', dn.col='red', name=paste('Precio de', clave))
addBBands() #el 95% de los precios observados se encuentran entre las bandas, ahi vemos que la volatilidad no es constante.
ggplot(rendimiento, aes(rendimiento)) + theme_bw()+
geom_density(fill = 'green', alpha=.15)+
stat_function(fun=dnorm, args = list(mean=mean(rendimiento$'SITESB-1.MX'), sd=sd(rendimiento$'SITESB-1.MX')), color='green', size=1.5) #distibucion normal con media y varianza iguales a las de mi vector de rendimiento
library(quantmod)
library(PerformanceAnalytics)
library(fBasics)
library(akima)
library(normtest)
library(crop)
library(lubridate)
library(ggplot2)
library(moments)
library(tibble)
rend_diario <- mean(rendimiento)
print('Rendimiento Promedio Diario')
rend_diario
rend_anualizado <- mean(rendimiento)*252
print('Rendimiento Promedio Anualizado')
rend_anualizado
vol_diaria <- sqrt(var(rendimiento))
print("Volatilidad Diaria")
as.numeric(vol_diaria)
vol_anualizada <- sqrt(var(rendimiento)*252)
print("Volatilidad Anualizada")
as.numeric(vol_anualizada)
jbr <- jarque.test(as.numeric(rendimiento))
jbr[['statistic']]
jbp <- jarque.test(as.numeric(precio))
jbp[['statistic']]
jbl <- jarque.test(as.numeric(log(precio)))
jbl[['statistic']]
kurtosis(rendimiento)
skewness(rendimiento)
jbr_2016 <- jarque.test(as.numeric(rendimiento[year(rendimiento)==2016]))
jbr_2016[['statistic']]
kurtosis(as.numeric(rendimiento[year(rendimiento)==2016]))
jbr_2017 <- jarque.test(as.numeric(rendimiento[year(rendimiento)==2017]))
jbr_2017[['statistic']]
kurtosis(as.numeric(rendimiento[year(rendimiento)==2017]))
jbr_2018 <- jarque.test(as.numeric(rendimiento[year(rendimiento)==2018]))
jbr_2018[['statistic']]
kurtosis(as.numeric(rendimiento[year(rendimiento)==2018]))
jbr_2019 <- jarque.test(as.numeric(rendimiento[year(rendimiento)==2019]))
jbr_2019[['statistic']]
kurtosis(as.numeric(rendimiento[year(rendimiento)==2019]))
jbr_2020 <- jarque.test(as.numeric(rendimiento[year(rendimiento)==2020]))
jbr_2020[['statistic']]
kurtosis(as.numeric(rendimiento[year(rendimiento)==2020]))
jbr_2021 <- jarque.test(as.numeric(rendimiento[year(rendimiento)==2021]))
jbr_2021[['statistic']]
kurtosis(as.numeric(rendimiento[year(rendimiento)==2021]))
t <- t.test(as.numeric(rendimiento))
t[['statistic']]
aux <- 0
for (annum in c(2016,2017,2018,2019,2020,2021))
{
aux <- t.test(as.numeric(rendimiento[year(rendimiento)==annum]))
print(aux[['statistic']])+print(annum)
aux <- 0
}
mu_2020 <- mean(rendimiento[year(rendimiento)==2020])
sigma_2020 <- sqrt(var(rendimiento[year(rendimiento)==2020]))
print(mu_2020)
print("rendimiento esperado diario")
print(sigma_2020)
print("volatilidad diaria")
d <- length(rendimiento)
S0 <- as.numeric(precio[d])
S0
n <- 10000
dt <- 10
simula <- tibble(epsilon=rnorm(n),dS=S0*mu_2020*dt+S0*sigma_2020*sqrt(dt)*epsilon)
PE_10 <- S0+mean(simula$dS)
PE_10
Media_DS <- mean(simula$dS)
DeSt_DS <- as.numeric(sqrt(var(simula$dS)))
Z <- qnorm(.975)
P_Sup_10 <- S0+Media_DS+Z*DeSt_DS
P_Inf_10 <- S0+Media_DS-Z*DeSt_DS
P_Sup_10
P_Inf_10
S0
n <- 10000
dt <- 20
simula <- tibble(epsilon=rnorm(n),dS=S0*mu_2020*dt+S0*sigma_2020*sqrt(dt)*epsilon)
PE_20 <- S0+mean(simula$dS)
PE_20
Media_DS <- mean(simula$dS)
DeSt_DS <- as.numeric(sqrt(var(simula$dS)))
Z <- qnorm(.975)
P_Sup_20 <- S0+Media_DS+Z*DeSt_DS
P_Inf_20 <- S0+Media_DS-Z*DeSt_DS
P_Sup_20
P_Inf_20
S0
n <- 10000
dt <- 40
simula <- tibble(epsilon=rnorm(n),dS=S0*mu_2020*dt+S0*sigma_2020*sqrt(dt)*epsilon)
PE_40 <- S0+mean(simula$dS)
PE_40
Media_DS <- mean(simula$dS)
DeSt_DS <- as.numeric(sqrt(var(simula$dS)))
Z <- qnorm(.975)
P_Sup_40 <- S0+Media_DS+Z*DeSt_DS
P_Inf_40 <- S0+Media_DS-Z*DeSt_DS
print(P_Sup_40)
P_Sup_40
print(P_Inf_40)
print(S0)
S0
resumen <- tibble(Diez <- c(PE_10,P_Sup_10,P_Inf_10),
Veinte <- c(PE_20,P_Sup_20,P_Inf_20),
Cuarenta <- c(PE_40,P_Sup_40,P_Inf_40),
.name_repair = ~ c("Diez días","Veinte días","Cuarenta días"))
resumen <- as.data.frame(resumen)
rownames(resumen) <- c("Valor esperado","Superior 95%","Inferior 95%")
resumen
mu_2020_a <- mean(rendimiento[year(rendimiento)==2020])*252
sigma_2020_a <- sqrt(var(rendimiento[year(rendimiento)==2020])*252)
print(mu_2020_a)
print("rendimiento esperado anual")
print(sigma_2020_a)
print("volatilidad anual")
d <- length(rendimiento)
lns0 <- as.numeric(log(precio[d]))
lns0
n <- 10000
dt <- 1/4
simula2 <- tibble(epsilon=rnorm(n),lnS=(mu_2020_a-(1/2)*sigma_2020_a**2)*dt+sigma_2020_a*sqrt(dt)*epsilon)
PE_3 <- lns0+mean(simula2$lnS)
PE_3
Media_DS <- mean(simula2$lnS)
DeSt_DS <- as.numeric(sqrt(var(simula2$lnS)))
Z <- qnorm(.975)
P_Sup_3 <- lns0+Media_DS+Z*DeSt_DS
P_Inf_3 <- lns0+Media_DS-Z*DeSt_DS
P_Sup_3
P_Inf_3
lns0
n <- 10000
dt <- 1/2
simula2 <- tibble(epsilon=rnorm(n),lnS=(mu_2020_a-(1/2)*sigma_2020_a**2)*dt+sigma_2020_a*sqrt(dt)*epsilon)
PE_6 <- lns0+mean(simula2$lnS)
PE_6
Media_DS <- mean(simula2$lnS)
DeSt_DS <- as.numeric(sqrt(var(simula2$lnS)))
Z <- qnorm(.975)
P_Sup_6 <- lns0+Media_DS+Z*DeSt_DS
P_Inf_6 <- lns0+Media_DS-Z*DeSt_DS
P_Sup_6
P_Inf_6
lns0
n <- 10000
dt <- 3/4
simula2 <- tibble(epsilon=rnorm(n),lnS=(mu_2020_a-(1/2)*sigma_2020_a**2)*dt+sigma_2020_a*sqrt(dt)*epsilon)
PE_9 <- lns0+mean(simula2$lnS)
PE_9
Media_DS <- mean(simula2$lnS)
DeSt_DS <- as.numeric(sqrt(var(simula2$lnS)))
Z <- qnorm(.975)
P_Sup_9 <- lns0+Media_DS+Z*DeSt_DS
P_Inf_9 <- lns0+Media_DS-Z*DeSt_DS
P_Sup_9
P_Inf_9
lns0
n <- 10000
dt <- 1
simula2 <- tibble(epsilon=rnorm(n),lnS=(mu_2020_a-(1/2)*sigma_2020_a**2)*dt+sigma_2020_a*sqrt(dt)*epsilon)
PE_12 <- lns0+mean(simula2$lnS)
PE_12
Media_DS <- mean(simula2$lnS)
DeSt_DS <- as.numeric(sqrt(var(simula2$lnS)))
Z <- qnorm(.975)
P_Sup_12 <- lns0+Media_DS+Z*DeSt_DS
P_Inf_12 <- lns0+Media_DS-Z*DeSt_DS
P_Sup_12
P_Inf_12
lns0
resumen <- tibble(Tres <- c(PE_3,P_Sup_3,P_Inf_3),
Seis <- c(PE_6,P_Sup_6,P_Inf_6),
Nueve <- c(PE_9,P_Sup_9,P_Inf_9),
Doce <- c(PE_12,P_Sup_12,P_Inf_12),
.name_repair = ~ c("Tres meses","Seis meses","Nueve meses","Doce meses"))
resumen <- as.data.frame(resumen)
rownames(resumen) <- c("Valor esperado","Superior 95%","Inferior 95%")
resumen
getSymbols("^MXX", from='2016-01-01', to=today(), warnings=FALSE)
rend_mercado <- na.omit(diff(log(MXX$MXX.Adjusted)))
# agregamos na.omit para evitar los datos incompletos
datos_corr <- merge.xts(rend_mercado,rendimiento)
names(datos_corr) <- c('IPC',clave)
chart.Correlation(na.omit(datos_corr))
cor(na.omit(datos_corr))
cov(na.omit(datos_corr))
library(tidyverse)
setwd('C:/Users/theso/OneDrive/Documents/Semestre 6/Analisis de Riesgo/Proyecto-AR-definitivo/Datos')
Emisoras <- read_csv('Emisoras_Completo2.csv')
Emisoras <- as.matrix(Emisoras)
datos2 <- new.env()
n <- nrow(Emisoras)
MAT_COR <- as.data.frame(matrix(0,n,2))
names(MAT_COR) <- c("Emisoras","Correlación")
for (i in 1:n) {
clave2 <- Emisoras[i,1]
getSymbols(clave2, from='2016-01-01', to=today(), warnings = FALSE, env=datos2)
activo2 <- datos2[[clave2]]
precio2 <- activo2[,6]
rend_act2 <- na.omit(diff(log(precio2)))
datos_cor2 <- merge.xts(rendimiento, rend_act2)
#chart.Correlation(na.omit(datos_cor2)) #para que no me haga 100 graficas
m <- cor(na.omit(datos_cor2))
ro <- m[2,1]
MAT_COR[i,1] <- clave2
MAT_COR[i,2] <- ro
}
library(tidyverse)
library(kableExtra)
mas_co <- arrange(MAT_COR,-Correlación)[2:6,]
DF_Emi <- tibble(mas_co)
kable(DF_Emi, caption = "<center>**Activos más Correlacionados**", align = c("c","c"), digits = 6) %>%
kable_classic(full_width=F) %>%
row_spec(0, bold = T) %>% #selecciono la columna 1 en negritas
column_spec(1, bold = T, color = "blue")
getSymbols("LACOMERUBC.MX", from='2016-01-01', to=today(), warnings=FALSE)
rend_LACOMERUBC <- na.omit(diff(log(LACOMERUBC.MX$LACOMERUBC.MX.Adjusted)))
getSymbols("RA.MX", from='2016-01-01', to=today(), warnings=FALSE)
rend_RA <- na.omit(diff(log(RA.MX$RA.MX.Adjusted)))
getSymbols("GFINBURO.MX", from='2016-01-01', to=today(), warnings=FALSE)
rend_GFINBURO <- na.omit(diff(log(GFINBURO.MX$GFINBURO.MX.Adjusted)))
getSymbols("GFNORTEO.MX", from='2016-01-01', to=today(), warnings=FALSE)
rend_GFNORTEO <- na.omit(diff(log(GFNORTEO.MX$GFNORTEO.MX.Adjusted)))
clave7 <- "AMX"
datos7 <- new.env()
getSymbols(clave7, from = "2016-01-01", to = today(), warnings = FALSE, env = datos7)
precio7 <- datos7[[clave7]][,6] #la información en la columna 6, o sea los precios al cierre
names(precio7) <- clave7
rend_AMX <-na.omit(diff(log(precio7)))
chartSeries((rendimiento), name = paste("Rendimiento de SITESB-1.MX"),up.col = "yellow", dn.col = "red")
chartSeries((rend_LACOMERUBC), name = paste("Precio de LACOMERUBC"),up.col = "orange", dn.col = "red")
chartSeries((rend_RA), name = paste("Rendimiento de RA"),up.col = "red", dn.col = "red")
chartSeries((rend_GFINBURO), name = paste("Rendimiento de GFINBURO"),up.col = "blue", dn.col = "red")
chartSeries((rend_GFNORTEO), name = paste("Rendimiento de GFNORTEO"),up.col = "purple", dn.col = "red")
chartSeries((rend_AMX), name = paste("Rendimiento de AMX"),up.col = "pink", dn.col = "red")
chartSeries((rend_mercado), name = paste("Rendimiento de IPC"),up.col = "white", dn.col = "red")
rend_T <- merge.xts(rendimiento, rend_LACOMERUBC, rend_RA, rend_GFINBURO, rend_GFNORTEO,  rend_AMX, rend_mercado)
plot(rend_T, main = "Rendimientos de los Activos + IPC", legend.loc="bottom")
library(quantmod)
library(PerformanceAnalytics)
library(lubridate)
library(reshape2)
library(ggplot2)
tickers <- c("SITESB-1.MX", "LACOMERUBC.MX", "RA.MX", "GFINBURO.MX",  "GFNORTEO.MX", "AMX", "MXX")
getSymbols(tickers, from = "2016-01-02", to = today(), warnings = FALSE)
list <- lapply((tickers), function(x) Cl(get(x)))
precio.cierre <- do.call(merge,list)
retornos <- data.frame(apply(precio.cierre, 2, function(x) Delt(x, type = "log")), fecha = index(precio.cierre))
reshape <- melt(retornos, id.vars = "fecha")
g2 <- ggplot(reshape) + geom_line(mapping = aes(fecha,value, color = variable))
g2 <- g2 + labs(title = "Retornos", subtitle = "SITES, WALMART")
g2 <- g2 + theme_bw() + xlab("Fecha") + ylab("Retornos")
g2 <- g2 + scale_color_manual("Tickers", values = c("green", "yellow", "orange", "red", "blue", "purple", "pink"))
g2 <- g2 + theme(legend.position = "bottom")
g2
Var_Real<-rendimiento**2
Vol_Real<-sqrt(Var_Real)
Real<-merge.xts(rendimiento, Vol_Real, -Vol_Real)
names(Real)<-c("Rendimiento","Vol_pos","Vol_Neg")
plot(Real, legend.loc = "top",main="Valores Observados", lwd=.5)
n <- nrow(Var_Real)
mavback <- function(x,n){filter(x, c(0, rep(1/n,n)), sides=1) }
Var_Est5<-xts(mavback(Var_Real, n=5), order.by = date(Var_Real))
n <- nrow(Var_Real)
mavback <- function(x,n){ filter(x, c(0, rep(1 / n, n)), sides=1) }
Var_Est5<-xts(mavback(Var_Real, n=5), order.by = date(Var_Real))
library(quantmod)
library(PerformanceAnalytics)
library(lubridate)
library(reshape2)
library(ggplot2)
library(fGarch)
#Obtención de Rendimientos
clave <- "SITESB-1.MX"
datos <- new.env()
getSymbols(clave, from = "2016-01-01", to = today(), warnings = FALSE, env = datos)
precio <- datos[[clave]][,6]
names(precio) <- clave
rend <-na.omit(diff(log(precio)))
Var_Hist<-rend**2
Vol_Hist<-sqrt(Var_Hist)
historica <-merge.xts(rend, Vol_Hist, -Vol_Hist)
names(historica)<-c("Rendimiento","Volatilidad Positiva","Volatilidad Negativa")
plot(historica, legend.loc = "top",main="Volatilidad Histórica Observada", lwd=.5)
mavback <- function(x,n){ stats::filter(x, c(0, rep(1/n,n)), sides=1) }
Var_Est5 <- xts(mavback(Var_Hist, n=5), order.by = date(Var_Hist))
Var_Est10 <- xts(mavback(Var_Hist, n=10), order.by = date(Var_Hist))
Var_Est20 <- xts(mavback(Var_Hist, n=20), order.by = date(Var_Hist))
Var_Est40 <- xts(mavback(Var_Hist, n=40), order.by = date(Var_Hist))
Var_Est <- merge.xts(Var_Est5, Var_Est10, Var_Est20, Var_Est40)
Var_Est <- merge.xts(Var_Est5, Var_Est10, Var_Est20, Var_Est40)
names(Var_Est) <- c("M5","M10","M20","M40")
plot(Var_Est, legend.loc="top", main = "Varianzas por Promedios Móviles", lwd=.5)
Dif_Est <- merge.xts((Var_Hist-Var_Est5)^2,(Var_Hist-Var_Est10)^2, (Var_Hist-Var_Est20)^2, (Var_Hist-Var_Est40)^2)
names(Dif_Est) <- c("5","10","20","40")
plot(Dif_Est, legend.loc = "bottom", main="Diferencias en la estimación", lwd=.5)
RMSE <- as.data.frame(sqrt(colMeans(na.omit(Dif_Est))))
names(RMSE) <- c("RMSE")
RMSE
M_opt <- subset(RMSE, RMSE == min(RMSE))
m <- as.numeric(row.names(M_opt))
m
if(m == 5){Var_Opt_PM <- Var_Est5}
if(m== 10){Var_Opt_PM <- Var_Est10}
if(m == 20){Var_Opt_PM <- Var_Est20}
if(m == 40){Var_Opt_PM <- Var_Est40}
Vol_Est_PM = sqrt(Var_Opt_PM)
plot(merge.xts(Vol_Est_PM,Vol_Hist),legend.loc="top" ,main="Diferencias en la estimación", lwd=.5)
library(fTrading)
n <- nrow(Var_Hist)
Var_Est <- matrix(0,n-1,1)
a <- seq(0.1,0.99,by=0.01)
Var_Est[1,1] <- Var_Hist[1,1]
Func <- matrix(0,n-1,1)
Resultados <- matrix(0,length(a),2)
colnames(Resultados) <- c('Lambda', 'Sum_FMV')
j <- 0
for (L in a) {
for (i in 2:(n-1)) {
Var_Est[i,1] <- (1-L)*Var_Hist[i-1,1] + L*Var_Est[i-1,1] #modelo EWMA
Func[i,1] <- - log(Var_Est[i-1,1]) - Var_Hist[i-1,1] / Var_Est[i-1,1]
}
j <- j+1
FMaxAct <- sum(Func)
Resultados[j,1] <- L
Resultados[j,2] <- FMaxAct
}
L_opt <- Resultados[order(Resultados[,'Sum_FMV'], decreasing = TRUE),]
L_opt <- as.numeric(L_opt[1,1])
L_opt
Var_Est_EWMA <- xts(emaTA(Var_Hist, lambda = L_opt), order.by= date(rend))
Resultados2 <- merge.xts(Var_Est_EWMA, Var_Hist)
names(Resultados2) <- c('Var_EWMA','Var_Hist')
plot(Resultados2, legend.loc = 'top', lwd=c(.4,.8), col=c('green','red'))
independencia <- Box.test(precio,lag=1,type="Ljung-Box",fitdf = 0)
independencia$statistic
arch1 <- garchFit(formula = ~garch(1,0),data = rend, cond.dist = "norm")
arch2 <- garchFit(formula = ~garch(2,0),data = rend, cond.dist = "norm")
arch3 <- garchFit(formula = ~garch(3,0),data = rend, cond.dist = "norm")
arch4 <- garchFit(formula = ~garch(4,0),data = rend, cond.dist = "norm")
arch5 <- garchFit(formula = ~garch(5,0),data = rend, cond.dist = "norm")
ics1 <- arch1@fit[["ics"]]
ics2 <- arch2@fit[["ics"]]
ics3 <- arch3@fit[["ics"]]
ics4 <- arch4@fit[["ics"]]
ics5 <- arch5@fit[["ics"]]
AICoptimo <- c(ics1[1],ics2[1],ics3[1],ics4[1],ics5[1])
AICoptimo
comp <- merge.xts(sqrt(arch1@h.t),sqrt(arch2@h.t),sqrt(arch3@h.t),sqrt(arch4@h.t),sqrt(arch5@h.t),Vol_Hist,names(c("ARCH 5","Volatilidad Histórica")))
plot(comp,legend.loc="top",main="Volatilidad Histórica vs ARCH",lw=.5)
garch1 <- garchFit(formula = ~garch(1,1),data = rend, cond.dist = "norm")
garch2 <- garchFit(formula = ~garch(2,2),data = rend, cond.dist = "norm")
garch3 <- garchFit(formula = ~garch(3,3),data = rend, cond.dist = "norm")
garch4 <- garchFit(formula = ~garch(4,4),data = rend, cond.dist = "norm")
garch5 <- garchFit(formula = ~garch(5,5),data = rend, cond.dist = "norm")
gics1 <- garch1@fit[["ics"]]
gics2 <- garch2@fit[["ics"]]
gics3 <- garch3@fit[["ics"]]
gics4 <- garch4@fit[["ics"]]
gics5 <- garch5@fit[["ics"]]
AICoptimo <- c(gics1[1],gics2[1],gics3[1],gics4[1],gics5[1])
AICoptimo
comp <- merge.xts(sqrt(garch1@h.t),sqrt(garch2@h.t),sqrt(garch3@h.t),sqrt(garch4@h.t),sqrt(garch5@h.t),Vol_Hist,names(c("ARCH 5","Volatilidad Histórica")))
plot(comp,legend.loc="top",main="Volatilidad Histórica vs GARCH",lw=.5)
